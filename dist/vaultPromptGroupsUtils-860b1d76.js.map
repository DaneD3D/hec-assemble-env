{"version":3,"file":"vaultPromptGroupsUtils-860b1d76.js","sources":["../vaultPromptGroupsUtils.mjs"],"sourcesContent":["import { SecretClient } from '@azure/keyvault-secrets';\nimport inquirer from 'inquirer';\n\n/**\n * Fetch all secret names and their tags from the Key Vault\n */\nexport async function getVaultSecretsWithTags(vaultUrl, credential) {\n  const client = new SecretClient(vaultUrl, credential);\n  const secrets = [];\n  for await (const secretProperties of client.listPropertiesOfSecrets()) {\n    secrets.push({ name: secretProperties.name, tags: secretProperties.tags || {} });\n  }\n  return secrets;\n}\n\n/**\n * Build groupings from secrets based on their 'group' tag\n */\nexport function buildGroupingsFromTags(secrets) {\n  const groupings = {};\n  for (const secret of secrets) {\n    const group = secret.tags.group;\n    if (group) {\n      if (!groupings[group]) groupings[group] = [];\n      groupings[group].push(secret.name);\n    }\n  }\n  return groupings;\n}\n\n/**\n * Prompt user for values for each secret, supporting group prompts\n */\nexport async function promptForVaultSecretsWithGroups({ vaultUrl, credential }) {\n  const secrets = await getVaultSecretsWithTags(vaultUrl, credential);\n  if (secrets.length === 0) {\n    console.log('No secrets found in Key Vault.');\n    return {};\n  }\n  const groupings = buildGroupingsFromTags(secrets);\n  const answers = {};\n  // Prompt for each group (skip group prompt if only one secret)\n  for (const [group, secretNames] of Object.entries(groupings)) {\n    if (secretNames.length === 1) {\n      // Only one secret, prompt individually\n      const name = secretNames[0];\n      const isSensitive = /secret|key|token|password/i.test(name);\n      const { value } = await inquirer.prompt([\n        {\n          type: isSensitive ? 'password' : 'input',\n          name: 'value',\n          message: `Enter value for secret '${name}':`,\n          mask: isSensitive ? '*' : undefined\n        }\n      ]);\n      answers[name] = value;\n    } else {\n      // Use password prompt for secrets likely to be sensitive\n      const isSensitive = secretNames.some(name => /secret|key|token|password/i.test(name));\n      const { groupValue } = await inquirer.prompt([\n        {\n          type: isSensitive ? 'password' : 'input',\n          name: 'groupValue',\n          message: `Enter value for group '${group}' (applies to: ${secretNames.join(', ')})`,\n          mask: isSensitive ? '*' : undefined\n        }\n      ]);\n      for (const name of secretNames) {\n        answers[name] = groupValue;\n      }\n    }\n  }\n  // Prompt for ungrouped secrets\n  const ungrouped = secrets.filter(s => !s.tags.group).map(s => s.name);\n  if (ungrouped.length > 0) {\n    const prompts = ungrouped.map(name => ({\n      type: /secret|key|token|password/i.test(name) ? 'password' : 'input',\n      name,\n      message: `Enter value for secret '${name}':`,\n      mask: /secret|key|token|password/i.test(name) ? '*' : undefined\n    }));\n    const ungroupedAnswers = await inquirer.prompt(prompts);\n    Object.assign(answers, ungroupedAnswers);\n  }\n\n  return answers;\n}\n"],"names":["async","getVaultSecretsWithTags","vaultUrl","credential","client","SecretClient","secrets","secretProperties","listPropertiesOfSecrets","push","name","tags","buildGroupingsFromTags","groupings","secret","group","promptForVaultSecretsWithGroups","length","console","log","answers","secretNames","Object","entries","isSensitive","test","value","inquirer","prompt","type","message","mask","undefined","some","groupValue","join","ungrouped","filter","s","map","prompts","ungroupedAnswers","assign"],"mappings":"+EAMOA,eAAeC,EAAwBC,EAAUC,GACtD,MAAMC,EAAS,IAAIC,EAAaH,EAAUC,GACpCG,EAAU,GAChB,UAAW,MAAMC,KAAoBH,EAAOI,0BAC1CF,EAAQG,KAAK,CAAEC,KAAMH,EAAiBG,KAAMC,KAAMJ,EAAiBI,MAAQ,CAAE,IAE/E,OAAOL,CACT,CAKO,SAASM,EAAuBN,GACrC,MAAMO,EAAY,CAAA,EAClB,IAAK,MAAMC,KAAUR,EAAS,CAC5B,MAAMS,EAAQD,EAAOH,KAAKI,MACtBA,IACGF,EAAUE,KAAQF,EAAUE,GAAS,IAC1CF,EAAUE,GAAON,KAAKK,EAAOJ,MAEhC,CACD,OAAOG,CACT,CAKOb,eAAegB,GAAgCd,SAAEA,EAAQC,WAAEA,IAChE,MAAMG,QAAgBL,EAAwBC,EAAUC,GACxD,GAAuB,IAAnBG,EAAQW,OAEV,OADAC,QAAQC,IAAI,kCACL,GAET,MAAMN,EAAYD,EAAuBN,GACnCc,EAAU,CAAA,EAEhB,IAAK,MAAOL,EAAOM,KAAgBC,OAAOC,QAAQV,GAChD,GAA2B,IAAvBQ,EAAYJ,OAAc,CAE5B,MAAMP,EAAOW,EAAY,GACnBG,EAAc,6BAA6BC,KAAKf,IAChDgB,MAAEA,SAAgBC,EAASC,OAAO,CACtC,CACEC,KAAML,EAAc,WAAa,QACjCd,KAAM,QACNoB,QAAS,2BAA2BpB,MACpCqB,KAAMP,EAAc,SAAMQ,KAG9BZ,EAAQV,GAAQgB,CACtB,KAAW,CAEL,MAAMF,EAAcH,EAAYY,KAAKvB,GAAQ,6BAA6Be,KAAKf,KACzEwB,WAAEA,SAAqBP,EAASC,OAAO,CAC3C,CACEC,KAAML,EAAc,WAAa,QACjCd,KAAM,aACNoB,QAAS,0BAA0Bf,mBAAuBM,EAAYc,KAAK,SAC3EJ,KAAMP,EAAc,SAAMQ,KAG9B,IAAK,MAAMtB,KAAQW,EACjBD,EAAQV,GAAQwB,CAEnB,CAGH,MAAME,EAAY9B,EAAQ+B,OAAOC,IAAMA,EAAE3B,KAAKI,OAAOwB,IAAID,GAAKA,EAAE5B,MAChE,GAAI0B,EAAUnB,OAAS,EAAG,CACxB,MAAMuB,EAAUJ,EAAUG,IAAI7B,IAAS,CACrCmB,KAAM,6BAA6BJ,KAAKf,GAAQ,WAAa,QAC7DA,OACAoB,QAAS,2BAA2BpB,MACpCqB,KAAM,6BAA6BN,KAAKf,GAAQ,SAAMsB,KAElDS,QAAyBd,EAASC,OAAOY,GAC/ClB,OAAOoB,OAAOtB,EAASqB,EACxB,CAED,OAAOrB,CACT"}