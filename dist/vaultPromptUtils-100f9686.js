import{SecretClient as t}from"@azure/keyvault-secrets";import"inquirer";async function e(e,r){const o=new t(e,r),s=[];for await(const t of o.listPropertiesOfSecrets())s.push({name:t.name,tags:t.tags||{}});return s}function r(t){const e=Object.create(null);for(const r of t){const t=r.tags.group;t&&(Array.isArray(e[t])||(e[t]=[]),e[t].push(r.name))}return e}async function o(e,r){const o=new t(e,r),s=[];for await(const t of o.listPropertiesOfSecrets())s.push(t.name);return s}async function s({vaultUrl:o,credential:s}){const n=new t(o,s),c=await e(o,s);if(0===c.length)return console.log("No secrets found in Key Vault."),{};const a=r(c);let i={};const{buildQueries:f,promptForValue:l}=await import("./index-c986bc4f.js").then(function(t){return t.b}),u={PROPERTIES:{},GROUPINGS:{}};for(const[t,e]of Object.entries(a)){let r={},o={};for(const t of e)try{const e=await n.getSecret(t),s=JSON.parse(e.value);s&&"object"==typeof s&&!Array.isArray(s)&&(r[t]=s,o[t]=Object.keys(s))}catch{}const s={},c={};for(const t of Object.keys(o)){const e=o[t].sort().join("||");s[e]=(s[e]||0)+1,c[t]=e}let a=null,i=0;for(const[t,e]of Object.entries(s))e>i&&(i=e,a=t);const f=a?a.split("||"):[],l=Object.keys(c).filter(t=>c[t]===a);if(l.length>0&&f.length>0){u.GROUPINGS[t]={KEYS:l,VALUES:f,PROMPT_MESSAGE:`Choose value for group '${t}' (applies to: ${l.join(", ")})`};for(const t of l)u.PROPERTIES[t]=f}const O=e.filter(t=>!l.includes(t));for(const t of O)try{const e=await n.getSecret(t),r=JSON.parse(e.value);r&&"object"==typeof r&&!Array.isArray(r)?u.PROPERTIES[t]=Object.keys(r):u.PROPERTIES[t]=[]}catch{u.PROPERTIES[t]=[]}}const O=c.filter(t=>!t.tags.group).map(t=>t.name);for(const t of O)try{const e=await n.getSecret(t),r=JSON.parse(e.value);r&&"object"==typeof r&&!Array.isArray(r)?u.PROPERTIES[t]=Object.keys(r):u.PROPERTIES[t]=[]}catch{u.PROPERTIES[t]=[]}const y=f(u);for(const t of Array.from(y.keys())){let e;if(t.startsWith("GROUP:")){const r=t.replace("GROUP:",""),o=u.GROUPINGS[r];o&&o.PROMPT_MESSAGE&&(e=o.PROMPT_MESSAGE)}const r=await l(t,y,{},u,e);Object.assign(i,r)}let P={};for(const[t,e]of Object.entries(i))try{const r=(await n.getSecret(t)).value,o=JSON.parse(r);o&&"object"==typeof o&&!Array.isArray(o)&&e in o?P[t]=o[e]:P[t]=e}catch{P[t]=e}return P}export{r as buildGroupingsFromTags,o as getVaultSecretNames,e as getVaultSecretsWithTags,s as promptForVaultSecrets};
//# sourceMappingURL=vaultPromptUtils-100f9686.js.map
