{"version":3,"file":"index-c986bc4f.js","sources":["../promptUtils.mjs","../vaultQueryUtils.mjs","../index.mjs"],"sourcesContent":["import inquirer from 'inquirer';\n\n/**\n * Validate config structure\n */\nexport function validateConfig(config) {\n  if (!config || typeof config !== 'object') throw new Error('Config must be an object.');\n  if (!config.PROPERTIES || typeof config.PROPERTIES !== 'object') throw new Error('Config missing PROPERTIES object.');\n  if (config.GROUPINGS && typeof config.GROUPINGS !== 'object') throw new Error('GROUPINGS must be an object if present.');\n  if (config.FILE_OUTPUT_NAME && typeof config.FILE_OUTPUT_NAME !== 'string') throw new Error('FILE_OUTPUT_NAME must be a string.');\n}\n\n/**\n * Build queries for prompt logic\n */\nexport function buildQueries(config) {\n  const queries = [];\n  const propertyKeys = Object.keys(config.PROPERTIES || {});\n  const groupNames = config.GROUPINGS ? Object.keys(config.GROUPINGS) : [];\n  const allGroupedKeys = new Set();\n  if (config.GROUPINGS) {\n    for (const groupName of groupNames) {\n      const groupObj = config.GROUPINGS[groupName];\n      queries.push({ type: 'group', name: groupName, keys: groupObj.KEYS, values: groupObj.VALUES });\n      for (const key of groupObj.KEYS) {\n        allGroupedKeys.add(key);\n      }\n    }\n  }\n  for (const key of propertyKeys) {\n    if (!allGroupedKeys.has(key) && !(Array.isArray(config.PROPERTIES[key]) && config.PROPERTIES[key].length === 0)) {\n      queries.push({ type: 'individual', name: key });\n    }\n  }\n  // Use Map for fast lookup\n  return new Map(queries.map(q => [q.type === 'group' ? `GROUP:${q.name}` : q.name, q]));\n}\n\n/**\n * Build choices for multi-select prompt\n */\nexport function buildUpdateChoices(queries) {\n  return Array.from(queries.values()).map(q => q.type === 'group'\n    ? { name: `[GROUP] ${q.name}`, value: `GROUP:${q.name}` }\n    : { name: q.name, value: q.name });\n}\n\n/**\n * Prompt for value (group or individual)\n */\nexport async function promptForValue(item, queriesMap, currentEnv, config) {\n  try {\n    // Accept custom prompt message as 5th argument\n    const customPromptMessage = arguments.length > 4 ? arguments[4] : undefined;\n    if (item.startsWith('GROUP:')) {\n      const groupName = item.replace('GROUP:', '');\n      const groupQuery = queriesMap.get(item);\n      if (!groupQuery) return {};\n      const { groupValue } = await inquirer.prompt([\n        {\n          type: 'list',\n          name: 'groupValue',\n          message: customPromptMessage || `Choose value for group ${groupName}:`,\n          choices: groupQuery.values,\n          default: currentEnv[groupQuery.keys[0]]\n        }\n      ]);\n      const result = {};\n      for (const key of groupQuery.keys) {\n        result[key] = groupValue;\n      }\n      return result;\n    } else {\n      let promptOptions = {\n        type: 'input',\n        name: 'newValue',\n        message: customPromptMessage || `Enter new value for ${item}:`,\n        default: currentEnv[item]\n      };\n      if (config.PROPERTIES && Array.isArray(config.PROPERTIES[item])) {\n        promptOptions = {\n          type: 'list',\n          name: 'newValue',\n          message: customPromptMessage || `Choose new value for ${item}:`,\n          choices: config.PROPERTIES[item],\n          default: currentEnv[item]\n        };\n      }\n      const { newValue } = await inquirer.prompt([promptOptions]);\n      return { [item]: newValue };\n    }\n  } catch (err) {\n    console.error(`\\u001b[31mPrompt error: ${err.message}\\u001b[0m`);\n    throw err;\n  }\n}\n","import { SecretClient } from '@azure/keyvault-secrets';\n\n/**\n * Utility to normalize and format secret names for Key Vault lookup\n * Example: EXAMPLE_CLIENT_ID=A -> EXAMPLE-CLIENT-ID-A\n */\nexport function buildSecretName(key, value) {\n  // Replace underscores with dashes, preserve case, append value if present\n  let base = key.replace(/_/g, '-');\n  if (value) {\n    return `${base}-${String(value)}`;\n  }\n  return base;\n}\n\n/**\n * Query Key Vault for secrets based on user answers\n * answers: { [key]: value }\n * Returns: { [key]: secretValue }\n */\nexport async function fetchSecretsFromVault({ answers, vaultUrl, credential, config }) {\n  const client = new SecretClient(vaultUrl, credential);\n  const result = {};\n  const useJsonLogic = config && typeof config.JSON_LOGIC === 'boolean' ? config.JSON_LOGIC : false;\n  // Prepare all queries for parallel execution\n  const queries = Object.entries(answers).map(([key, value]) => async () => {\n    if (useJsonLogic) {\n      const unifiedSecretName = buildSecretName(key);\n      // console.log(`[DEBUG] JSON_LOGIC enabled. Searching for unified secret: key='${key}', value='${value}', secretName='${unifiedSecretName}'`);\n      try {\n        const secret = await client.getSecret(unifiedSecretName);\n        let jsonObj;\n        try {\n          jsonObj = JSON.parse(secret.value);\n        } catch (jsonErr) {\n          // console.error(`Error parsing JSON for secret '${unifiedSecretName}': ${jsonErr.message}`);\n          return [key, `[INVALID JSON: ${unifiedSecretName}]`];\n        }\n        if (jsonObj && Object.prototype.hasOwnProperty.call(jsonObj, value)) {\n          return [key, jsonObj[value]];\n        } else {\n          // console.error(`Warning: Key '${value}' not found in JSON for secret '${unifiedSecretName}'.`);\n          return [key, `[NOT FOUND: ${unifiedSecretName} -> ${value}]`];\n        }\n      } catch (err) {\n        // console.error(`Warning: Unified secret '${unifiedSecretName}' not found in Key Vault.`);\n        return [key, `[NOT FOUND: ${unifiedSecretName}]`];\n      }\n    } else {\n      const secretName = buildSecretName(key, value);\n      // console.log(`[DEBUG] Searching for secret: key='${key}', value='${value}', secretName='${secretName}'`);\n      try {\n        const secret = await client.getSecret(secretName);\n        return [key, secret.value];\n      } catch (err) {\n        // console.error(`Warning: Secret '${secretName}' not found in Key Vault.`);\n        return [key, `[NOT FOUND: ${secretName}]`];\n      }\n    }\n  });\n  // Run all queries in parallel\n  const results = await Promise.all(queries.map(fn => fn()));\n  for (const [key, value] of results) {\n    result[key] = value;\n  }\n  return result;\n}\n","import { DefaultAzureCredential } from '@azure/identity';\nimport { SecretClient } from '@azure/keyvault-secrets';\nimport { Client } from '@microsoft/microsoft-graph-client';\nimport inquirer from 'inquirer';\nimport fs from 'fs';\nconst fsp = fs.promises;\nimport 'isomorphic-fetch';\nimport { validateConfig, buildQueries, buildUpdateChoices, promptForValue } from './promptUtils.mjs';\nimport { fetchSecretsFromVault } from './vaultQueryUtils.mjs';\n\n/**\n * Shared logic for env file creation and modification\n */\nasync function promptAndWriteEnv({ config, envFilePath, currentEnv = {}, skipEvaluation = false }) {\n  // Validate config structure\n  try {\n    validateConfig(config);\n  } catch (err) {\n    if (err.message === 'Config missing PROPERTIES object.') {\n      // Fallback: prompt for vault secrets dynamically\n      const vaultUrl = config.AZURE_SERVER;\n      const credential = getAzureCredentials();\n      // Prefer group-aware prompt if available\n      let answers;\n      try {\n        const { promptForVaultSecretsWithGroups } = await import('./vaultPromptGroupsUtils.mjs');\n        answers = await promptForVaultSecretsWithGroups({ vaultUrl, credential });\n      } catch {\n        const { promptForVaultSecrets } = await import('./vaultPromptUtils.mjs');\n        answers = await promptForVaultSecrets({ vaultUrl, credential });\n      }\n      let envContent = '';\n      for (const [key, value] of Object.entries(answers)) {\n        envContent += `${key}=${value}\\n`;\n      }\n      await fsp.writeFile(envFilePath, envContent);\n      console.log(`${envFilePath} created from Key Vault secrets.`);\n      return;\n    } else {\n      console.error(`\\u001b[31mConfig validation error: ${err.message}\\u001b[0m`);\n      throw err;\n    }\n  }\n  const keys = Object.keys(currentEnv).length > 0 ? Object.keys(currentEnv) : Object.keys(config.PROPERTIES || {});\n  let updatedEnv = { ...currentEnv };\n  let groupedKeys = new Set();\n  let answers = {};\n  let queriesMap = buildQueries(config);\n  let queries = Array.from(queriesMap.values());\n  let updateChoices = buildUpdateChoices(queriesMap);\n  let keysToUpdate = [];\n  if (!skipEvaluation && Object.keys(currentEnv).length > 0) {\n    if (updateChoices.length === 0) {\n      keysToUpdate = [];\n    } else {\n      try {\n        const promptRes = await inquirer.prompt([\n          {\n            type: 'checkbox',\n            name: 'keysToUpdate',\n            message: 'Select groups/keys to update:',\n            choices: updateChoices\n          }\n        ]);\n        keysToUpdate = promptRes.keysToUpdate;\n      } catch (err) {\n        console.error(`\\u001b[31mPrompt error: ${err.message}\\u001b[0m`);\n        throw err;\n      }\n    }\n  } else {\n    keysToUpdate = updateChoices.map(c => c.value);\n  }\n  // Run through selected queries and collect answers\n  if (keysToUpdate.length === 0) {\n    // nothing to update\n  } else {\n    for (const item of keysToUpdate) {\n      const result = await promptForValue(item, queriesMap, currentEnv, config);\n      for (const [key, value] of Object.entries(result)) {\n        updatedEnv[key] = value;\n        answers[key] = value;\n        if (item.startsWith('GROUP:')) groupedKeys.add(key);\n      }\n    }\n  }\n\n  // Query Azure Key Vault for each key/value pair using vaultQueryUtils\n  let vaultUrl = config.AZURE_SERVER;\n  if (!vaultUrl) {\n    console.error(`\\u001b[31mNo Key Vault URL provided in config (AZURE_SERVER).\\u001b[0m`);\n    throw new Error('No Key Vault URL provided.');\n  }\n  const credential = getAzureCredentials();\n  const secrets = await fetchSecretsFromVault({ answers, vaultUrl, credential, config });\n  let envContent = '';\n  // Get all keys from config.PROPERTIES (ensures all keys are present)\n  const allConfigKeys = Object.keys(config.PROPERTIES || {});\n  for (const key of allConfigKeys) {\n    if (Object.keys(secrets).includes(key)) {\n      envContent += `${key}=${secrets[key]}\\n`;\n    } else if (currentEnv[key] !== undefined) {\n      envContent += `${key}=${currentEnv[key]}\\n`;\n    } else {\n      envContent += `${key}=\\n`;\n    }\n  }\n  try {\n    await fsp.writeFile(envFilePath, envContent);\n    console.log(`${envFilePath} updated with secrets from Azure Key Vault.`);\n  } catch (err) {\n    console.error(`\\u001b[31mFailed to write env file: ${err.message}\\u001b[0m`);\n    throw err;\n  }\n}\n/**\n * Reads and parses a .env file into an object\n */\nasync function readEnvFile(envFilePath) {\n  try {\n    await fsp.access(envFilePath);\n  } catch {\n    return {};\n  }\n  try {\n    const content = await fsp.readFile(envFilePath, 'utf-8');\n    const lines = content.split(/\\r?\\n/);\n    const env = {};\n    for (const line of lines) {\n      if (!line.trim() || line.trim().startsWith('#')) continue;\n      const [key, ...rest] = line.split('=');\n      env[key.trim()] = rest.join('=').trim();\n    }\n    return env;\n  } catch (err) {\n    console.error(`\\u001b[31mFailed to read env file: ${err.message}\\u001b[0m`);\n    return {};\n  }\n}\n\n/**\n * Allows user to select which env keys to update, and prompts for new values\n */\nexport async function updateEnvFileInteractively(envFilePath) {\n  let currentEnv = {};\n  let config = {};\n  try {\n    currentEnv = await readEnvFile(envFilePath);\n    const configPath = process.argv.find(arg => arg.startsWith('--config='));\n    if (configPath) {\n      const configFile = configPath.split('=')[1];\n      const configContent = await fsp.readFile(configFile, 'utf-8');\n      config = JSON.parse(configContent);\n    }\n  } catch (err) {\n    console.error(`\\u001b[31mError loading config or env: ${err.message}\\u001b[0m`);\n    throw err;\n  }\n  if (Object.keys(currentEnv).length === 0) {\n    console.log('No existing values found in env file.');\n    return;\n  }\n  await promptAndWriteEnv({ config, envFilePath, currentEnv, skipEvaluation: false });\n}\n\nexport function getAzureCredentials() {\n  return new DefaultAzureCredential();\n}\n\nexport async function getCurrentUserEmail() {\n  const credential = getAzureCredentials();\n  const tokenResponse = await credential.getToken('https://graph.microsoft.com/.default');\n  const client = Client.init({\n    authProvider: (done) => {\n      done(null, tokenResponse.token);\n    }\n  });\n  const user = await client.api('/me').get();\n  const email = user.mail || user.userPrincipalName;\n  // Print in green with a space below (using console.log for reliability)\n  console.log(`\\u001b[32mCurrent user email: ${email}\\u001b[0m\\n`);\n  return email;\n}\n\nexport async function promptKeyVaultSecretsAndWriteEnv(options = {}) {\n  // Accept FILE_OUTPUT_NAME from config as envFile\n  const envFile = options.FILE_OUTPUT_NAME || options.envFile || '.env';\n  // If propertyValues is present, skip all prompts and Key Vault logic\n  if (options.propertyValues) {\n    let envContent = '';\n    for (const [key, value] of Object.entries(options.propertyValues)) {\n      if (Array.isArray(value)) {\n        value.forEach((v, idx) => {\n          envContent += `${key}_${idx + 1}=${v}\\n`;\n        });\n      } else {\n        envContent += `${key}=${value}\\n`;\n      }\n    }\n    try {\n      await fsp.writeFile(envFile, envContent);\n      console.log(`${envFile} file created with values from config.`);\n    } catch (err) {\n      console.error(`\\u001b[31mFailed to write env file: ${err.message}\\u001b[0m`);\n      throw err;\n    }\n    return;\n  }\n\n  // Otherwise, run interactive prompt and Key Vault logic\n  let config = { ...options };\n  await promptAndWriteEnv({ config, envFilePath: envFile, skipEvaluation: true });\n\n  // Otherwise, use inputs if provided\n  let KEY_VAULT_INPUTS = options.inputs;\n  let answers = {};\n  let envContent = '';\n  if (KEY_VAULT_INPUTS) {\n    for (const input of KEY_VAULT_INPUTS) {\n      let promptType = 'input';\n      if (input.choices && input.choices.length > 0) {\n        promptType = input.key === 'secrets' ? 'checkbox' : 'list';\n      }\n      try {\n        const response = await inquirer.prompt([\n          {\n            type: promptType,\n            name: input.key,\n            message: `Choose ${input.key}:`,\n            choices: input.choices\n          }\n        ]);\n        answers[input.key] = response[input.key];\n      } catch (err) {\n        console.error(`\\u001b[31mPrompt error: ${err.message}\\u001b[0m`);\n        throw err;\n      }\n    }\n\n    const credential = getAzureCredentials();\n    // vaultUrl must be defined in options or config\n    const vaultUrl = options.vaultUrl || config.AZURE_SERVER;\n    if (!vaultUrl) {\n      console.error(`\\u001b[31mNo Key Vault URL provided.\\u001b[0m`);\n      throw new Error('No Key Vault URL provided.');\n    }\n    const client = new SecretClient(vaultUrl, credential);\n    for (const input of KEY_VAULT_INPUTS) {\n      if (input.key !== 'secrets') {\n        envContent += `${input.key.toUpperCase()}=${answers[input.key]}\\n`;\n      }\n    }\n    for (const name of answers.secrets || []) {\n      try {\n        const secret = await client.getSecret(name);\n        envContent += `${name}=${secret.value}\\n`;\n      } catch (err) {\n        console.error(`Failed to fetch secret '${name}':`, err.message);\n      }\n    }\n    try {\n      await fsp.writeFile(envFile, envContent);\n      console.log(`${envFile} file created with retrieved secrets.`);\n    } catch (err) {\n      console.error(`\\u001b[31mFailed to write env file: ${err.message}\\u001b[0m`);\n      throw err;\n    }\n  }\n}\n"],"names":["validateConfig","config","Error","PROPERTIES","GROUPINGS","FILE_OUTPUT_NAME","buildQueries","queries","propertyKeys","Object","keys","groupNames","allGroupedKeys","Set","groupName","groupObj","push","type","name","KEYS","values","VALUES","key","add","has","Array","isArray","length","Map","map","q","buildUpdateChoices","from","value","async","promptForValue","item","queriesMap","currentEnv","customPromptMessage","arguments","undefined","startsWith","replace","groupQuery","get","groupValue","inquirer","prompt","message","choices","default","result","promptOptions","newValue","err","console","error","buildSecretName","base","String","fsp","fs","promises","promptAndWriteEnv","envFilePath","skipEvaluation","vaultUrl","AZURE_SERVER","credential","getAzureCredentials","answers","promptForVaultSecretsWithGroups","import","promptForVaultSecrets","envContent","entries","writeFile","log","groupedKeys","updateChoices","keysToUpdate","c","secrets","client","SecretClient","useJsonLogic","JSON_LOGIC","unifiedSecretName","secret","getSecret","jsonObj","JSON","parse","jsonErr","prototype","hasOwnProperty","call","secretName","results","Promise","all","fn","fetchSecretsFromVault","allConfigKeys","includes","updateEnvFileInteractively","access","lines","readFile","split","env","line","trim","rest","join","readEnvFile","configPath","process","argv","find","arg","configFile","configContent","DefaultAzureCredential","getCurrentUserEmail","tokenResponse","getToken","Client","init","authProvider","done","token","user","api","email","mail","userPrincipalName","promptKeyVaultSecretsAndWriteEnv","options","envFile","propertyValues","forEach","v","idx","KEY_VAULT_INPUTS","inputs","input","promptType","response","toUpperCase"],"mappings":"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"}