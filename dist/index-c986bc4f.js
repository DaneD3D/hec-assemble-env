import{DefaultAzureCredential as e}from"@azure/identity";import{SecretClient as t}from"@azure/keyvault-secrets";import{Client as r}from"@microsoft/microsoft-graph-client";import o from"inquirer";import a from"fs";import"isomorphic-fetch";function n(e){if(!e||"object"!=typeof e)throw new Error("Config must be an object.");if(!e.PROPERTIES||"object"!=typeof e.PROPERTIES)throw new Error("Config missing PROPERTIES object.");if(e.GROUPINGS&&"object"!=typeof e.GROUPINGS)throw new Error("GROUPINGS must be an object if present.");if(e.FILE_OUTPUT_NAME&&"string"!=typeof e.FILE_OUTPUT_NAME)throw new Error("FILE_OUTPUT_NAME must be a string.")}function s(e){const t=[],r=Object.keys(e.PROPERTIES||{}),o=e.GROUPINGS?Object.keys(e.GROUPINGS):[],a=new Set;if(e.GROUPINGS)for(const r of o){const o=e.GROUPINGS[r];t.push({type:"group",name:r,keys:o.KEYS,values:o.VALUES});for(const e of o.KEYS)a.add(e)}for(const o of r)a.has(o)||Array.isArray(e.PROPERTIES[o])&&0===e.PROPERTIES[o].length||t.push({type:"individual",name:o});return new Map(t.map(e=>["group"===e.type?`GROUP:${e.name}`:e.name,e]))}function i(e){return Array.from(e.values()).map(e=>"group"===e.type?{name:`[GROUP] ${e.name}`,value:`GROUP:${e.name}`}:{name:e.name,value:e.name})}async function c(e,t,r,a){try{const n=arguments.length>4?arguments[4]:void 0;if(e.startsWith("GROUP:")){const a=e.replace("GROUP:",""),s=t.get(e);if(!s)return{};const{groupValue:i}=await o.prompt([{type:"list",name:"groupValue",message:n||`Choose value for group ${a}:`,choices:s.values,default:r[s.keys[0]]}]),c={};for(const e of s.keys)c[e]=i;return c}{let t={type:"input",name:"newValue",message:n||`Enter new value for ${e}:`,default:r[e]};a.PROPERTIES&&Array.isArray(a.PROPERTIES[e])&&(t={type:"list",name:"newValue",message:n||`Choose new value for ${e}:`,choices:a.PROPERTIES[e],default:r[e]});const{newValue:s}=await o.prompt([t]);return{[e]:s}}}catch(e){throw console.error(`[31mPrompt error: ${e.message}[0m`),e}}var l=Object.freeze({__proto__:null,validateConfig:n,buildQueries:s,buildUpdateChoices:i,promptForValue:c});function u(e,t){let r=e.replace(/_/g,"-");return t?`${r}-${String(t)}`:r}const f=a.promises;async function m({config:e,envFilePath:r,currentEnv:a={},skipEvaluation:l=!1}){try{n(e)}catch(t){if("Config missing PROPERTIES object."===t.message){const t=e.AZURE_SERVER,o=y();let a;try{const{promptForVaultSecretsWithGroups:e}=await import("./vaultPromptGroupsUtils-860b1d76.js");a=await e({vaultUrl:t,credential:o})}catch{const{promptForVaultSecrets:e}=await import("./vaultPromptUtils-100f9686.js");a=await e({vaultUrl:t,credential:o})}let n="";for(const[e,t]of Object.entries(a))n+=`${e}=${t}\n`;return await f.writeFile(r,n),void console.log(`${r} created from Key Vault secrets.`)}throw console.error(`[31mConfig validation error: ${t.message}[0m`),t}Object.keys(a).length>0?Object.keys(a):Object.keys(e.PROPERTIES||{});let m=new Set,p={},h=s(e);Array.from(h.values());let w=i(h),g=[];if(!l&&Object.keys(a).length>0)if(0===w.length)g=[];else try{g=(await o.prompt([{type:"checkbox",name:"keysToUpdate",message:"Select groups/keys to update:",choices:w}])).keysToUpdate}catch(e){throw console.error(`[31mPrompt error: ${e.message}[0m`),e}else g=w.map(e=>e.value);if(0===g.length);else for(const t of g){const r=await c(t,h,a,e);for(const[e,o]of Object.entries(r))p[e]=o,t.startsWith("GROUP:")&&m.add(e)}let E=e.AZURE_SERVER;if(!E)throw console.error("[31mNo Key Vault URL provided in config (AZURE_SERVER).[0m"),new Error("No Key Vault URL provided.");const O=y(),d=await async function({answers:e,vaultUrl:r,credential:o,config:a}){const n=new t(r,o),s={},i=!(!a||"boolean"!=typeof a.JSON_LOGIC)&&a.JSON_LOGIC,c=Object.entries(e).map(([e,t])=>async()=>{if(i){const r=u(e);try{const o=await n.getSecret(r);let a;try{a=JSON.parse(o.value)}catch(t){return[e,`[INVALID JSON: ${r}]`]}return a&&Object.prototype.hasOwnProperty.call(a,t)?[e,a[t]]:[e,`[NOT FOUND: ${r} -> ${t}]`]}catch(t){return[e,`[NOT FOUND: ${r}]`]}}else{const r=u(e,t);try{const t=await n.getSecret(r);return[e,t.value]}catch(t){return[e,`[NOT FOUND: ${r}]`]}}}),l=await Promise.all(c.map(e=>e()));for(const[e,t]of l)s[e]=t;return s}({answers:p,vaultUrl:E,credential:O,config:e});let v="";const P=Object.keys(e.PROPERTIES||{});for(const e of P)Object.keys(d).includes(e)?v+=`${e}=${d[e]}\n`:void 0!==a[e]?v+=`${e}=${a[e]}\n`:v+=`${e}=\n`;try{await f.writeFile(r,v),console.log(`${r} updated with secrets from Azure Key Vault.`)}catch(e){throw console.error(`[31mFailed to write env file: ${e.message}[0m`),e}}async function p(e){let t={},r={};try{t=await async function(e){try{await f.access(e)}catch{return{}}try{const t=(await f.readFile(e,"utf-8")).split(/\r?\n/),r={};for(const e of t){if(!e.trim()||e.trim().startsWith("#"))continue;const[t,...o]=e.split("=");r[t.trim()]=o.join("=").trim()}return r}catch(e){return console.error(`[31mFailed to read env file: ${e.message}[0m`),{}}}(e);const o=process.argv.find(e=>e.startsWith("--config="));if(o){const e=o.split("=")[1],t=await f.readFile(e,"utf-8");r=JSON.parse(t)}}catch(e){throw console.error(`[31mError loading config or env: ${e.message}[0m`),e}0!==Object.keys(t).length?await m({config:r,envFilePath:e,currentEnv:t,skipEvaluation:!1}):console.log("No existing values found in env file.")}function y(){return new e}async function h(){const e=y(),t=await e.getToken("https://graph.microsoft.com/.default"),o=r.init({authProvider:e=>{e(null,t.token)}}),a=await o.api("/me").get(),n=a.mail||a.userPrincipalName;return console.log(`[32mCurrent user email: ${n}[0m\n`),n}async function w(e={}){const r=e.FILE_OUTPUT_NAME||e.envFile||".env";if(e.propertyValues){let t="";for(const[r,o]of Object.entries(e.propertyValues))Array.isArray(o)?o.forEach((e,o)=>{t+=`${r}_${o+1}=${e}\n`}):t+=`${r}=${o}\n`;try{await f.writeFile(r,t),console.log(`${r} file created with values from config.`)}catch(e){throw console.error(`[31mFailed to write env file: ${e.message}[0m`),e}return}let a={...e};await m({config:a,envFilePath:r,skipEvaluation:!0});let n=e.inputs,s={},i="";if(n){for(const e of n){let t="input";e.choices&&e.choices.length>0&&(t="secrets"===e.key?"checkbox":"list");try{const r=await o.prompt([{type:t,name:e.key,message:`Choose ${e.key}:`,choices:e.choices}]);s[e.key]=r[e.key]}catch(e){throw console.error(`[31mPrompt error: ${e.message}[0m`),e}}const c=y(),l=e.vaultUrl||a.AZURE_SERVER;if(!l)throw console.error("[31mNo Key Vault URL provided.[0m"),new Error("No Key Vault URL provided.");const u=new t(l,c);for(const e of n)"secrets"!==e.key&&(i+=`${e.key.toUpperCase()}=${s[e.key]}\n`);for(const e of s.secrets||[])try{i+=`${e}=${(await u.getSecret(e)).value}\n`}catch(t){console.error(`Failed to fetch secret '${e}':`,t.message)}try{await f.writeFile(r,i),console.log(`${r} file created with retrieved secrets.`)}catch(e){throw console.error(`[31mFailed to write env file: ${e.message}[0m`),e}}}export{h as a,l as b,y as g,w as p,p as u};
//# sourceMappingURL=index-c986bc4f.js.map
